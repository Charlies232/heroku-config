#! /usr/bin/env node

// verifies that we've got the correct node version
// they just run on a "recent version" now, so we don't need this
//     "pretest": "./bin/node_version_check",

'use strict'

const yaml = require('js-yaml')
const fs = require('fs')
const path = require('path')
// cli-helper depends on got, so we should always have this
const got = require('got')
const semver = require('semver')

const url = 'https://raw.githubusercontent.com/heroku/cli/master/package.json'

got(url, { json: true })
  .then(resp => {
    const herokuVersion = resp.body.oclif.update.node.version

    const settings = yaml.safeLoad(
      fs.readFileSync(path.join(__dirname, '..', '.travis.yml'), 'utf8')
    )
    const testVersion = settings.node_js[0]

    const localVersion = process.version

    let code = 0

    if (herokuVersion !== testVersion) {
      console.error(
        `[ERROR] Should be testing against "v${herokuVersion}", not "v${testVersion}". Update .travis.yml accordingly\n`
      )
      code = 1
    }

    if (!semver.satisfies(localVersion, resp.body.engines.node)) {
      console.error(
        `[ERROR] Heroku CLI requires node ${resp.body.engines.node}\n`
      )
      code = 1
    }

    if (semver.eq(localVersion, semver.coerce(testVersion))) {
      console.warn(
        `[WARN]: Current node version (${localVersion}) does not match prod node version (${herokuVersion})\n`
      )
    }

    process.exit(code)
  })
  .catch(err => {
    console.log(err)
    process.exit(1)
  })
